name: Auto-Create Recursive Child Issues from JIRA

on:
  issues:
    types: [opened]

permissions:
  contents: write         # For reading/writing files if needed
  issues: write           # To create GitHub issues
  repository-projects: write  # To create project cards

env:
  JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
  JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
  JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
  GITHUB_PROJECT_COLUMN_ID: ${{ secrets.GITHUB_PROJECT_COLUMN_ID }}

jobs:
  create-child-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Process JIRA Child Issues Recursively
        uses: actions/github-script@v6
        with:
          script: |
            const https = require('https');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // For issues: opened event, the payload has an "issue" field.
            const parentIssue = context.payload.issue;
            if (!parentIssue) {
              console.log("No parent issue found in payload. Exiting.");
              return;
            }
            const issueNumber = parentIssue.number;
            const parentContent = (parentIssue.title || "") + "\n" + (parentIssue.body || "");
            
            // Attempt to extract the JIRA key from a URL
            // Example URL: https://shaifimran.atlassian.net/jira/software/projects/CS4067/boards/3?selectedIssue=CS4067-3
            const jiraUrlRegex = /https:\/\/shaifimran\.atlassian\.net\/jira\/software\/projects\/CS4067\/boards\/\d+\?selectedIssue=([A-Z]+-\d+)/;
            let jiraParentKey = null;
            const urlMatch = parentContent.match(jiraUrlRegex);
            if (urlMatch && urlMatch[1]) {
              jiraParentKey = urlMatch[1];
              console.log(`Extracted JIRA key from URL: ${jiraParentKey}`);
            } else {
              // Fallback: search for any JIRA key pattern (e.g. "CS4067-3")
              const keyRegex = /[A-Z]+-\d+/;
              const keyMatch = parentContent.match(keyRegex);
              if (keyMatch) {
                jiraParentKey = keyMatch[0];
                console.log(`Extracted JIRA key from content: ${jiraParentKey}`);
              }
            }
            
            if (!jiraParentKey) {
              console.log("No JIRA key found in the parent issue. Exiting.");
              return;
            }
            
            // Get the GitHub project column id from the environment
            const columnId = process.env.GITHUB_PROJECT_COLUMN_ID;
            if (!columnId) {
              console.log("No GitHub project column id provided (GITHUB_PROJECT_COLUMN_ID). Exiting.");
              return;
            }
            
            // Helper function to perform GET requests and return JSON
            function getJson(url, headers) {
              return new Promise((resolve, reject) => {
                const options = { headers: headers };
                https.get(url, options, (res) => {
                  let data = '';
                  res.on('data', chunk => data += chunk);
                  res.on('end', () => {
                    try {
                      const json = JSON.parse(data);
                      resolve(json);
                    } catch (err) {
                      reject(err);
                    }
                  });
                }).on('error', err => reject(err));
              });
            }
            
            // Recursive function to process child issues from JIRA
            async function processChildIssues(jiraKey, githubParentIssueNumber, columnId) {
              const jql = encodeURIComponent(`parent = "${jiraKey}" OR "Epic Link" = "${jiraKey}"`);
              const jiraBaseUrl = process.env.JIRA_BASE_URL;
              const jiraUsername = process.env.JIRA_USERNAME;
              const jiraToken = process.env.JIRA_TOKEN;
              const jiraSearchUrl = `${jiraBaseUrl}/rest/api/2/search?jql=${jql}&fields=summary`;
              
              // Prepare basic auth header for JIRA
              const auth = Buffer.from(`${jiraUsername}:${jiraToken}`).toString('base64');
              const headers = {
                "Authorization": `Basic ${auth}`,
                "Accept": "application/json"
              };
              
              let jiraResponse;
              try {
                jiraResponse = await getJson(jiraSearchUrl, headers);
              } catch (error) {
                console.error(`Error fetching child issues for ${jiraKey}:`, error.message);
                return;
              }
              const childIssues = jiraResponse.issues || [];
              if (childIssues.length === 0) {
                console.log(`No child issues found for JIRA issue ${jiraKey}.`);
                return;
              }
              for (const child of childIssues) {
                const childKey = child.key;  // e.g., "CS4067-4"
                const childSummary = child.fields.summary || "(No summary)";
                const childTitle = `[${childKey}] ${childSummary}`;
                const childBody = `Auto-created from JIRA issue **${childKey}**.\n` +
                                  `**Parent GitHub Issue**: #${githubParentIssueNumber}\n` +
                                  `**Parent JIRA Issue**: ${jiraKey}`;
                
                // Create a new GitHub issue for the child issue
                const { data: newIssue } = await github.rest.issues.create({
                  owner,
                  repo,
                  title: childTitle,
                  body: childBody
                });
                console.log(`Created GitHub issue #${newIssue.number} for JIRA issue ${childKey}.`);
                
                // Add the new GitHub issue as a project card in the specified column
                await github.rest.projects.createCard({
                  column_id: parseInt(columnId, 10),
                  content_id: newIssue.id,
                  content_type: "Issue"
                });
                console.log(`Added issue #${newIssue.number} to project column ${columnId}.`);
                
                // Recursively process further child issues of this child
                await processChildIssues(childKey, newIssue.number, columnId);
              }
            }
            
            // Start the recursive process from the parent JIRA key
            await processChildIssues(jiraParentKey, issueNumber, columnId);
            console.log("Recursive child issue creation completed.");
