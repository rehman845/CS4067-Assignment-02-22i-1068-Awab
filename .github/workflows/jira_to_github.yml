name: Auto-Create Child Issues from Parent Issue

on:
  issues:
    types: [opened]

permissions:
  contents: write         # For reading/writing files if needed
  issues: write           # To create GitHub issues
  repository-projects: write  # To create project cards

env:
  GITHUB_PROJECT_COLUMN_ID: ${{ secrets.GITHUB_PROJECT_COLUMN_ID }}

jobs:
  create-child-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Process Child Issues from Parent Issue
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const parentIssue = context.payload.issue;
            if (!parentIssue) {
              console.log("No parent issue found in payload. Exiting.");
              return;
            }
            const issueNumber = parentIssue.number;
            const parentTitle = parentIssue.title || "";
            const parentBody = parentIssue.body || "";
            
            // Extract the project key from the title, e.g. "[CS4067-1]"
            const keyRegex = /\[?([A-Z]+-\d+)\]?/;
            let parentKey = null;
            const keyMatch = parentTitle.match(keyRegex);
            if (keyMatch && keyMatch[1]) {
              parentKey = keyMatch[1];
              console.log(`Extracted project key from title: ${parentKey}`);
            } else {
              console.log("No project key found in title. Exiting.");
              return;
            }
            
            // Parse child tasks from the parent issue body:
            // Each line starting with "- [ ]" is considered a child task.
            const lines = parentBody.split("\n");
            const childTasks = lines
              .filter(line => line.trim().startsWith("- [ ]"))
              .map(line => line.replace("- [ ]", "").trim())
              .filter(task => task.length > 0);
            if (childTasks.length === 0) {
              console.log("No child tasks found in parent issue body. Exiting.");
              return;
            }
            
            // Extract the prefix and number from the parent key (e.g. "CS4067-1")
            const [keyPrefix, numberPart] = parentKey.split("-");
            let currentNumber = parseInt(numberPart);
            if (isNaN(currentNumber)) {
              currentNumber = 1;
            }
            
            // Get the GitHub project column id from the environment
            const columnId = process.env.GITHUB_PROJECT_COLUMN_ID;
            if (!columnId) {
              console.log("No GitHub project column id provided. Exiting.");
              return;
            }
            
            // Function to create child issues sequentially
            async function createChildIssues(tasks, startNumber, parentIssueNumber) {
              let newNumber = startNumber;
              for (const task of tasks) {
                newNumber++;
                const newKey = `${keyPrefix}-${newNumber}`;
                const newTitle = `[${newKey}] ${task}`;
                const newBody = `Auto-created from parent issue #${parentIssueNumber}.\n` +
                                `Parent key: ${parentKey}`;
                
                // Create the new GitHub issue
                const { data: newIssue } = await github.rest.issues.create({
                  owner,
                  repo,
                  title: newTitle,
                  body: newBody
                });
                console.log(`Created GitHub issue #${newIssue.number} with key ${newKey}.`);
                
                // Add the new issue as a project card in the specified column
                await github.rest.projects.createCard({
                  column_id: parseInt(columnId, 10),
                  content_id: newIssue.id,
                  content_type: "Issue"
                });
                console.log(`Added issue #${newIssue.number} to project column ${columnId}.`);
                
                // (Optional) Recursion: Check if the newly created issue body contains further tasks and process them.
              }
              return newNumber;
            }
            
            // Create child issues using the tasks from the parent issue
            await createChildIssues(childTasks, currentNumber, issueNumber);
            console.log("Child issues creation from parent issue completed.");
